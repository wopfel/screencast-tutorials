use strict;
use warnings;
use YAML::Tiny;


sub tmux_send($) {

    my $content = shift;

    my @args = ( "tmux", "send-keys", "-t", "0:0.0",
                 $content,
               );
    system( @args );

}


sub run_cmd($$$) {

    my $nr = shift;
    my $cmd = shift;
    my $explanation = shift;

    printf "Step %3d: $cmd\n", $nr;
    print  "          $explanation";

    open WIPFILE, ">", "/tmp/testenv_step-${nr}_wip";
    print WIPFILE "1";
    close WIPFILE;

    tmux_send( "$cmd ; rc $nr" );

    sleep 1;

    tmux_send( "Enter" );

    # Wait until done file is written (which is created by the rc() bash function
    while ( ! -e "/tmp/testenv_step-${nr}_done" ) {
    }

    # Read return code from done file
    open DONEFILE, "<", "/tmp/testenv_step-${nr}_done";
    my $rc_from_file = <DONEFILE>;
    print "--- Result: $rc_from_file ---";
    close DONEFILE;

    print "\n";

}



# Define bash function
tmux_send "function rc() { echo \$? > /tmp/testenv_step-\${1}_done ; }";
tmux_send "Enter";
# Set prompt black text, green background
tmux_send 'PS1="\[\033[42m\]\[\033[30m\]\u@\h:\w\\$\[\033[00m\] "';
tmux_send "Enter";

my $step_list = YAML::Tiny->read( '/tmp/testenv_script.yml' )  or  die;
my $step_count = scalar( @{ $step_list->[0]->{steps} } );

for my $step_nr ( 0 .. $step_count-1 ) {

    my %step = %{ $step_list->[0]->{steps}->[$step_nr] };

    run_cmd( $step_nr + 1, $step{'cmd'}, $step{'desc'} );

}

print "The end.\n";
