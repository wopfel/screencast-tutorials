---
steps:
- desc: 'Update apt package cache'
  cmd: 'apt-get update'
- desc: 'Non-interactive apt'
  cmd: 'export DEBIAN_FRONTEND=noninteractive'
- desc: 'Install needed packages'
  cmd: 'apt install -y git'
- desc: 'Create directory'
  cmd: 'mkdir git-bisect-test'
- desc: 'Change directory'
  cmd: 'cd git-bisect-test'
- desc: 'Create git repository'
  cmd: 'git init .'
- desc: 'Create main program (just prints 5 on STDOUT)'
  cmd: echo 'print "5\n";' > test-program
- desc: 'Run main program'
  cmd: 'perl test-program'
- desc: 'Set name and mail config setting for git'
  cmd: 'git config --global user.email "me@example.com" && git config --global user.name "My Name"'
- desc: 'Add file to git staging area'
  cmd: 'git add test-program'
- desc: 'Commit'
  cmd: 'git commit -m "First commit"'
- desc: 'A bunch of non-relevant commits'
  cmd: 'for i in `seq 1 100` ; do echo $i > docu-file ; git add docu-file ; git commit -m "Docu update #$i" ; done'
- desc: 'Show git history'
  cmd: 'git log --pretty=oneline -10'
- desc: 'Changing output of main program'
  cmd: echo 'print "6\n";' > test-program
- desc: 'Add file to staging area'
  cmd: 'git add test-program'
- desc: 'Commit'
  cmd: 'git commit -m "A program change"'
- desc: 'Show git history'
  cmd: 'git log --pretty=oneline -10'
- desc: 'Again, a bunch of non-relevant commits'
  cmd: 'for i in `seq 1 100` ; do echo $i > docu-file ; git add docu-file ; git commit -m "Docu update #$i" ; done'
- desc: 'Show git history'
  cmd: 'git log --pretty=oneline -10'
- desc: 'The main program prints "6" to STDOUT now'
  cmd: 'perl test-program'
- desc: 'We use git bisect to find the commit that changed the output'
  cmd: 'git bisect start'
- desc: 'We could check-out every commit and run the program, but that would take long time'
  cmd: 'sleep 1'
- desc: 'Instead, we provide a check program for git bisect to do all that stuff'
  cmd: echo 'result=$( perl test-program)' > bisect-check
- desc: '2nd line: rc=0 means git bisect good, rc=1 means a bad commit'
  cmd: echo 'if [[ $result -eq 5 ]] ; then exit 0 ; else exit 1 ; fi' >> bisect-check
- desc: 'Running the check program: rc=1, that means bad commit'
  cmd: 'bash bisect-check ; echo $?'
- desc: 'Mark this as a bad commit'
  cmd: 'git bisect bad'
- desc: 'Checkout the 1st commit'
  cmd: 'git checkout $(git rev-list --all | tail -n 1)'
- desc: 'Run main program; see, it is a good commit (output is 5)'
  cmd: 'perl test-program'
- desc: 'Mark this as a good commit'
  cmd: 'git bisect good'
- desc: 'Go back to the previous commit (HEAD)'
  cmd: 'git switch -'
- desc: 'Run git bisect'
  cmd: 'git bisect run bash bisect-check'
- desc: 'Git status: the introduced-bad-commit is checked out'
  cmd: 'git status'
